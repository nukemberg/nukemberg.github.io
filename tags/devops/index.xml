<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Temporary heresy</title><link>https://blog.nukemberg.com/tags/devops/</link><description>Recent content in DevOps on Temporary heresy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Oct 2016 09:11:33 +0200</lastBuildDate><atom:link href="https://blog.nukemberg.com/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Finding a needle in a haystack - JVM logging guide</title><link>https://blog.nukemberg.com/presentation/jvm-logging-guide/</link><pubDate>Fri, 21 Oct 2016 09:11:33 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/jvm-logging-guide/</guid><description/></item><item><title>Continuous Delusions</title><link>https://blog.nukemberg.com/presentation/continuous-delusions/</link><pubDate>Sun, 16 Oct 2016 20:01:42 +0300</pubDate><guid>https://blog.nukemberg.com/presentation/continuous-delusions/</guid><description/></item><item><title>The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win</title><link>https://blog.nukemberg.com/book/the-phoenix-project/</link><pubDate>Wed, 22 Jun 2016 15:12:37 +0800</pubDate><guid>https://blog.nukemberg.com/book/the-phoenix-project/</guid><description/></item><item><title>The Ironies of Reliability</title><link>https://blog.nukemberg.com/post/the-ironies-of-reliability/</link><pubDate>Sat, 12 Mar 2016 19:16:29 +0700</pubDate><guid>https://blog.nukemberg.com/post/the-ironies-of-reliability/</guid><description>Reliability promotes failures. Failures promote reliability When a system is reliable long enough, production pressure causes the operators to drive the system harder; Over time operators become less careful as the trauma of the last failure wears off. More workload is applied, new features introduced, etc, until the system trails again into the danger zone (e.g. high load once thought to be dangerous), sailing through smoothly this time, thus boosting the confidence of operators in the robustness of their system.</description></item><item><title>Bash is a thought pattern</title><link>https://blog.nukemberg.com/post/bash-is-a-thought-pattern/</link><pubDate>Fri, 26 Feb 2016 00:38:42 +0200</pubDate><guid>https://blog.nukemberg.com/post/bash-is-a-thought-pattern/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>As I became more involved in workshops and training, I observed many people coming from old-school sysadmin backgrounds struggle with the moderns tools and methodologies that the SRE and DevOps movements are promoting. I often wonder why it so hard for some of them to learn the &amp;ldquo;new ways&amp;rdquo;. I&amp;rsquo;ve heard many people comment (often disrespectfully) that these difficulties are due to lack of &amp;ldquo;technical skills&amp;rdquo; - frequently citing poor programming abilities. While I agree this may be a real problem for &lt;em>some&lt;/em> people, this explanation is far from being sufficient.&lt;/p></description></item><item><title>The most important principle of managing a software organization</title><link>https://blog.nukemberg.com/post/sw-dev-managment/</link><pubDate>Sun, 07 Feb 2016 22:46:23 +0200</pubDate><guid>https://blog.nukemberg.com/post/sw-dev-managment/</guid><description>&lt;p>During my years of consulting, I&amp;rsquo;ve run into many managers (in enterprises and startup companies alike) who just didn&amp;rsquo;t get this whole &amp;ldquo;technical debt&amp;rdquo; thing. You&amp;rsquo;ve run into those managers too, I&amp;rsquo;m sure - the kind of manager who issues pressing deadlines, marks bug reports for left-over time (which never comes), relies on VMotion or fancy SAN for high availability, refuses upgrades because of &amp;ldquo;risks&amp;rdquo; and urges you to &amp;ldquo;stop wasting your time listening to tech talks and go write features&amp;rdquo;. I&amp;rsquo;ve even heard managers tell engineers &amp;ldquo;don&amp;rsquo;t waste your time learning this framework, just write your system with it&amp;rdquo; (!!!)&lt;/p>
&lt;p>I&amp;rsquo;ve often wondered - why is it so hard for them to get something that is so painfully obvious to the majority of software engineers?&lt;/p></description></item><item><title>How many startup engineers does it take to change a lightbulb?</title><link>https://blog.nukemberg.com/post/how-many-engineers-does-it-take-to-change-a-lightbulb/</link><pubDate>Mon, 02 Nov 2015 19:40:58 +0200</pubDate><guid>https://blog.nukemberg.com/post/how-many-engineers-does-it-take-to-change-a-lightbulb/</guid><description>2 - a technical co-founder and a business co-founder. Since they don&amp;rsquo;t have enough money for proper lightbulb they use an old socket and lightbulb they found in the garage and since they don&amp;rsquo;t fit the technical co-founder builds a makeshift adapter from duct tape and aluminium foil. This actually works as long as you don&amp;rsquo;t tilt it too much. During seed negotiations the co-founders break up and the technical co-founder leaves.</description></item></channel></rss>