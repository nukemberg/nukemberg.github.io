<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software engineering on The Nukemblog</title><link>https://blog.nukemberg.com/tags/software-engineering/</link><description>Recent content in Software engineering on The Nukemblog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Nov 2022 17:46:53 -0600</lastBuildDate><atom:link href="https://blog.nukemberg.com/tags/software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>The Math of Scalability</title><link>https://blog.nukemberg.com/presentation/the-math-of-scalability/</link><pubDate>Fri, 18 Nov 2022 17:46:53 -0600</pubDate><guid>https://blog.nukemberg.com/presentation/the-math-of-scalability/</guid><description/></item><item><title>Queue Theory for Node Developers</title><link>https://blog.nukemberg.com/presentation/queue-theory-for-node-developers/</link><pubDate>Tue, 25 Jan 2022 20:44:31 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/queue-theory-for-node-developers/</guid><description/></item><item><title>The Reboot, Reloaded</title><link>https://blog.nukemberg.com/presentation/the-reboot-reloaded/</link><pubDate>Sat, 22 Jan 2022 18:13:19 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/the-reboot-reloaded/</guid><description/></item><item><title>Droping Acid</title><link>https://blog.nukemberg.com/presentation/droping-acid/</link><pubDate>Sat, 16 Oct 2021 16:08:54 +0300</pubDate><guid>https://blog.nukemberg.com/presentation/droping-acid/</guid><description/></item><item><title>Lies Damn Lies Async Io</title><link>https://blog.nukemberg.com/presentation/lies-damn-lies-async-io/</link><pubDate>Sat, 16 Oct 2021 16:08:34 +0300</pubDate><guid>https://blog.nukemberg.com/presentation/lies-damn-lies-async-io/</guid><description/></item><item><title>Whats the Cost of a Millisecond</title><link>https://blog.nukemberg.com/presentation/whats-the-cost-of-a-millisecond/</link><pubDate>Sat, 16 Oct 2021 15:45:37 +0300</pubDate><guid>https://blog.nukemberg.com/presentation/whats-the-cost-of-a-millisecond/</guid><description/></item><item><title>Our systems changed, have our designs?</title><link>https://blog.nukemberg.com/presentation/our-systems-changed-have-our-designs/</link><pubDate>Mon, 11 Jan 2021 09:49:40 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/our-systems-changed-have-our-designs/</guid><description/></item><item><title>Http Workshop</title><link>https://blog.nukemberg.com/presentation/http-workshop/</link><pubDate>Mon, 11 Jan 2021 09:49:26 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/http-workshop/</guid><description/></item><item><title>If all you have is MS Project, everything looks like a time estimate</title><link>https://blog.nukemberg.com/post/if-all-you-have-is-ms-project/</link><pubDate>Fri, 08 Jan 2021 10:24:43 +0200</pubDate><guid>https://blog.nukemberg.com/post/if-all-you-have-is-ms-project/</guid><description>One of the things that struck me the most when observing managers at work, and in particular newly instated managers, is how managers become more and more out of touch with the realities of work. There&amp;rsquo;s actually a lot of research on that from quite a bit of different perspectives. Safety research for example has interesting things to say about &amp;ldquo;work as imagined&amp;rdquo; and &amp;ldquo;work as done&amp;rdquo;. This doesn&amp;rsquo;t happen over night of course, but rather a slow process - and I found it has a lot to do with the shift from doing and experiencing to planning and monitoring.</description></item><item><title>Plans are valuable, but planning is invaluable</title><link>https://blog.nukemberg.com/post/plans-are-valuable-planning-is-invaluable/</link><pubDate>Sun, 13 Dec 2020 05:05:10 +0200</pubDate><guid>https://blog.nukemberg.com/post/plans-are-valuable-planning-is-invaluable/</guid><description>In preparing for battle I have always found that plans are useless, but planning is indispensable. Dwight D. Eisenhower What would you give for the ability to predict the future? a lot I presume. Knowing the future (and being free to act on it) can make you rich, successful, almost indestructible. What would you give to know the future with 90% probability of being right? well, if you can participate in the lottery every week 90% pretty much guarantees success, definitely valuable.</description></item><item><title>No, engineers don't suck at time estimates</title><link>https://blog.nukemberg.com/post/no-engineers-dont-suck-at-estimates/</link><pubDate>Mon, 07 Dec 2020 21:14:22 +0200</pubDate><guid>https://blog.nukemberg.com/post/no-engineers-dont-suck-at-estimates/</guid><description>No, engineers don&amp;rsquo;t suck at time estimates - and generally speaking humans are better estimators than what most people believe. This seems rather surprising given all we&amp;rsquo;ve heard about the problems of bad time estimations, projects going overboard, etc and of course, your personal experience with software time estimates. But if people are really bad at estimation, how does that fit with our obvious evolutionary need to make quick decisions based on partial data?</description></item><item><title>The Burndown Chart Fallacy</title><link>https://blog.nukemberg.com/post/the-burndown-chart-fallacy/</link><pubDate>Wed, 02 Dec 2020 22:34:42 +0200</pubDate><guid>https://blog.nukemberg.com/post/the-burndown-chart-fallacy/</guid><description>Have you ever walked into an office and saw a huge flat screen on the wall displaying a dashboard with pretty graphs, or some other nice visualization showing some important looking numbers? Back when people still frequented offices, many had them. But have you ever wondered, what are they for? No engineer is looking at them, because when you are looking at data you want to interact with the data, zoom, pan or apply some filter.</description></item><item><title>The Design of Design</title><link>https://blog.nukemberg.com/book/design-of-design/</link><pubDate>Wed, 12 Aug 2020 09:43:38 +0300</pubDate><guid>https://blog.nukemberg.com/book/design-of-design/</guid><description/></item><item><title>The Fullstack conundrum and the commoditization of web development</title><link>https://blog.nukemberg.com/post/the-fullstack-conundrum/</link><pubDate>Thu, 08 Aug 2019 14:27:55 +0300</pubDate><guid>https://blog.nukemberg.com/post/the-fullstack-conundrum/</guid><description>From meetup groups to job listings to titles on LinkedIn, full-stackers are all around. but for a term so prevalent it is surprisingly ambiguous. What is a &amp;ldquo;full-stack&amp;rdquo; developer? What does she do? What is the scope of her work? Does our company need one? Practical questions I imagine have crossed the minds of many VP R&amp;amp;Ds and CTOs. It would have been nice to have a common definition, but human languages is dynamic and evolves, so fragmentation and ambiguity are part of the game.</description></item><item><title>The Art of Debugging</title><link>https://blog.nukemberg.com/presentation/the-art-of-debugging/</link><pubDate>Thu, 25 Jul 2019 11:10:50 +0300</pubDate><guid>https://blog.nukemberg.com/presentation/the-art-of-debugging/</guid><description/></item><item><title>Can I tell you a secret? I see dead systems</title><link>https://blog.nukemberg.com/presentation/i-see-dead-systems/</link><pubDate>Sat, 01 Sep 2018 17:08:38 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/i-see-dead-systems/</guid><description/></item><item><title>Total Cloud Immersion</title><link>https://blog.nukemberg.com/presentation/total-cloud-immersion/</link><pubDate>Wed, 06 Jun 2018 23:51:45 +0300</pubDate><guid>https://blog.nukemberg.com/presentation/total-cloud-immersion/</guid><description/></item><item><title>The Missing User Stories</title><link>https://blog.nukemberg.com/presentation/the-missing-user-stories/</link><pubDate>Wed, 06 Jun 2018 22:42:43 +0300</pubDate><guid>https://blog.nukemberg.com/presentation/the-missing-user-stories/</guid><description/></item><item><title>Data: You keep using that word...</title><link>https://blog.nukemberg.com/presentation/data-you-keep-using-that-word/</link><pubDate>Wed, 29 Nov 2017 23:59:42 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/data-you-keep-using-that-word/</guid><description/></item><item><title>Actionable Exceptions</title><link>https://blog.nukemberg.com/presentation/actionable-exceptions/</link><pubDate>Wed, 01 Nov 2017 18:32:25 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/actionable-exceptions/</guid><description/></item><item><title>Resilient Design 101</title><link>https://blog.nukemberg.com/presentation/resilient-design-101/</link><pubDate>Wed, 01 Nov 2017 18:12:42 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/resilient-design-101/</guid><description/></item><item><title>It's time to rethink work</title><link>https://blog.nukemberg.com/presentation/its-time-to-rethink-what-it-means-to-be-sw-engineer/</link><pubDate>Mon, 27 Feb 2017 23:33:28 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/its-time-to-rethink-what-it-means-to-be-sw-engineer/</guid><description/></item><item><title>The Future of O/S</title><link>https://blog.nukemberg.com/presentation/the-future-of-os/</link><pubDate>Fri, 21 Oct 2016 09:18:54 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/the-future-of-os/</guid><description/></item><item><title>Finding a needle in a haystack - JVM logging guide</title><link>https://blog.nukemberg.com/presentation/jvm-logging-guide/</link><pubDate>Fri, 21 Oct 2016 09:11:33 +0200</pubDate><guid>https://blog.nukemberg.com/presentation/jvm-logging-guide/</guid><description/></item><item><title>The Mythical Man-Month: Essays On Software Engineering</title><link>https://blog.nukemberg.com/book/the-mythical-man-month/</link><pubDate>Wed, 22 Jun 2016 15:10:50 +0800</pubDate><guid>https://blog.nukemberg.com/book/the-mythical-man-month/</guid><description/></item><item><title>Why a private cloud is an exercise in futility</title><link>https://blog.nukemberg.com/post/why-a-private-cloud-is-an-exercise-in-futility/</link><pubDate>Fri, 25 Mar 2016 07:51:09 +1100</pubDate><guid>https://blog.nukemberg.com/post/why-a-private-cloud-is-an-exercise-in-futility/</guid><description>&lt;p>Every corporation and enterprise want a private cloud these days. The arguments vary from company to company, usually revolving around security, cost, independence and strangely enough — reliability. I could argue that given the track record of most enterprise IT departments it seems dubious they can improve even one of these parameters compared to a public cloud, but I won’t. It turns out there’s no point refuting those arguments, because, and I cannot emphasize this enough:&lt;/p>
&lt;h2 id="you-are-going-to-end-up-using-a-public-cloud-even-if-its-more-expensive-and-less-secure-less-reliable-and-less-independent">You are going to end up using a public cloud, even if it’s more expensive and less secure, less reliable and less independent&lt;/h2></description></item><item><title>Bash is a thought pattern</title><link>https://blog.nukemberg.com/post/bash-is-a-thought-pattern/</link><pubDate>Fri, 26 Feb 2016 00:38:42 +0200</pubDate><guid>https://blog.nukemberg.com/post/bash-is-a-thought-pattern/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>As I became more involved in workshops and training, I observed many people coming from old-school sysadmin backgrounds struggle with the moderns tools and methodologies that the SRE and DevOps movements are promoting. I often wonder why it so hard for some of them to learn the &amp;ldquo;new ways&amp;rdquo;. I&amp;rsquo;ve heard many people comment (often disrespectfully) that these difficulties are due to lack of &amp;ldquo;technical skills&amp;rdquo; - frequently citing poor programming abilities. While I agree this may be a real problem for &lt;em>some&lt;/em> people, this explanation is far from being sufficient.&lt;/p></description></item><item><title>The most important principle of managing a software organization</title><link>https://blog.nukemberg.com/post/sw-dev-managment/</link><pubDate>Sun, 07 Feb 2016 22:46:23 +0200</pubDate><guid>https://blog.nukemberg.com/post/sw-dev-managment/</guid><description>&lt;p>During my years of consulting, I&amp;rsquo;ve run into many managers (in enterprises and startup companies alike) who just didn&amp;rsquo;t get this whole &amp;ldquo;technical debt&amp;rdquo; thing. You&amp;rsquo;ve run into those managers too, I&amp;rsquo;m sure - the kind of manager who issues pressing deadlines, marks bug reports for left-over time (which never comes), relies on VMotion or fancy SAN for high availability, refuses upgrades because of &amp;ldquo;risks&amp;rdquo; and urges you to &amp;ldquo;stop wasting your time listening to tech talks and go write features&amp;rdquo;. I&amp;rsquo;ve even heard managers tell engineers &amp;ldquo;don&amp;rsquo;t waste your time learning this framework, just write your system with it&amp;rdquo; (!!!)&lt;/p>
&lt;p>I&amp;rsquo;ve often wondered - why is it so hard for them to get something that is so painfully obvious to the majority of software engineers?&lt;/p></description></item></channel></rss>