<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on The Nukemblog</title><link>https://blog.nukemberg.com/post/</link><description>Recent content in Posts on The Nukemblog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Jul 2021 08:43:20 +0300</lastBuildDate><atom:link href="https://blog.nukemberg.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>That's like, just your opinion man</title><link>https://blog.nukemberg.com/post/thats-like-just-your-opinion/</link><pubDate>Mon, 26 Jul 2021 08:43:20 +0300</pubDate><guid>https://blog.nukemberg.com/post/thats-like-just-your-opinion/</guid><description>In Israel it occasionally happens that someone declares himself &amp;ldquo;king of the Jews&amp;rdquo;, &amp;ldquo;messaih&amp;rdquo; or even the &amp;ldquo;reincarnation of Jesus Christ&amp;rdquo; - it&amp;rsquo;s quite common and has been dubbed the &amp;ldquo;Jerusalem Syndrome&amp;rdquo;. We have quite a few of these prophets, along with a healthy supply of self proclaimed gurus, rabbies and cult leaders with their respective followers. We also have a horde of state endorsed religious nutcases (Israel does not have separation of church and state) with varying degrees of psychosis.</description></item><item><title>Talent is largely a myth</title><link>https://blog.nukemberg.com/post/talent-is-largely-a-myth/</link><pubDate>Fri, 29 Jan 2021 11:51:24 +0200</pubDate><guid>https://blog.nukemberg.com/post/talent-is-largely-a-myth/</guid><description>One of the repeating motifs of recruiting in the software industry are mantras of &amp;ldquo;talent&amp;rdquo;: &amp;ldquo;We recruit the best talent&amp;rdquo;, &amp;ldquo;talent attracts talent&amp;rdquo;, &amp;ldquo;we value talent&amp;rdquo; and so on. Some companies have so called &amp;ldquo;head of talent&amp;rdquo;, &amp;ldquo;talent acquisition&amp;rdquo;, &amp;ldquo;talent development&amp;rdquo; professionals on their payroll - basically a re-branding of HR. With the amount of conversations, conference talks and hype going on around talent, you would expect people will have an answer to the question &amp;ldquo;what is talent?</description></item><item><title>If all you have is MS Project, everything looks like a time estimate</title><link>https://blog.nukemberg.com/post/if-all-you-have-is-ms-project/</link><pubDate>Fri, 08 Jan 2021 10:24:43 +0200</pubDate><guid>https://blog.nukemberg.com/post/if-all-you-have-is-ms-project/</guid><description>One of the things that struck me the most when observing managers at work, and in particular newly instated managers, is how managers become more and more out of touch with the realities of work. There&amp;rsquo;s actually a lot of research on that from quite a bit of different perspectives. Safety research for example has interesting things to say about &amp;ldquo;work as imagined&amp;rdquo; and &amp;ldquo;work as done&amp;rdquo;. This doesn&amp;rsquo;t happen over night of course, but rather a slow process - and I found it has a lot to do with the shift from doing and experiencing to planning and monitoring.</description></item><item><title>Plans are valuable, but planning is invaluable</title><link>https://blog.nukemberg.com/post/plans-are-valuable-planning-is-invaluable/</link><pubDate>Sun, 13 Dec 2020 05:05:10 +0200</pubDate><guid>https://blog.nukemberg.com/post/plans-are-valuable-planning-is-invaluable/</guid><description>In preparing for battle I have always found that plans are useless, but planning is indispensable. Dwight D. Eisenhower What would you give for the ability to predict the future? a lot I presume. Knowing the future (and being free to act on it) can make you rich, successful, almost indestructible. What would you give to know the future with 90% probability of being right? well, if you can participate in the lottery every week 90% pretty much guarantees success, definitely valuable.</description></item><item><title>No, engineers don't suck at time estimates</title><link>https://blog.nukemberg.com/post/no-engineers-dont-suck-at-estimates/</link><pubDate>Mon, 07 Dec 2020 21:14:22 +0200</pubDate><guid>https://blog.nukemberg.com/post/no-engineers-dont-suck-at-estimates/</guid><description>No, engineers don&amp;rsquo;t suck at time estimates - and generally speaking humans are better estimators than what most people believe. This seems rather surprising given all we&amp;rsquo;ve heard about the problems of bad time estimations, projects going overboard, etc and of course, your personal experience with software time estimates. But if people are really bad at estimation, how does that fit with our obvious evolutionary need to make quick decisions based on partial data?</description></item><item><title>The Burndown Chart Fallacy</title><link>https://blog.nukemberg.com/post/the-burndown-chart-fallacy/</link><pubDate>Wed, 02 Dec 2020 22:34:42 +0200</pubDate><guid>https://blog.nukemberg.com/post/the-burndown-chart-fallacy/</guid><description>Have you ever walked into an office and saw a huge flat screen on the wall displaying a dashboard with pretty graphs, or some other nice visualization showing some important looking numbers? Back when people still frequented offices, many had them. But have you ever wondered, what are they for? No engineer is looking at them, because when you are looking at data you want to interact with the data, zoom, pan or apply some filter.</description></item><item><title>The Fullstack conundrum and the commoditization of web development</title><link>https://blog.nukemberg.com/post/the-fullstack-conundrum/</link><pubDate>Thu, 08 Aug 2019 14:27:55 +0300</pubDate><guid>https://blog.nukemberg.com/post/the-fullstack-conundrum/</guid><description>From meetup groups to job listings to titles on LinkedIn, full-stackers are all around. but for a term so prevalent it is surprisingly ambiguous. What is a &amp;ldquo;full-stack&amp;rdquo; developer? What does she do? What is the scope of her work? Does our company need one? Practical questions I imagine have crossed the minds of many VP R&amp;amp;Ds and CTOs. It would have been nice to have a common definition, but human languages is dynamic and evolves, so fragmentation and ambiguity are part of the game.</description></item><item><title>Blame It on the Phones</title><link>https://blog.nukemberg.com/post/blame-it-on-the-phones/</link><pubDate>Tue, 09 Jul 2019 22:50:08 +0300</pubDate><guid>https://blog.nukemberg.com/post/blame-it-on-the-phones/</guid><description>Since I&amp;rsquo;ve abandoned Facebook my primary source of tech news has become Twitter and this week my feed is raging with two seemingly unrelated security/privacy incidents: Zoom&amp;rsquo;s zero day and Superhuman&amp;rsquo;s email tracking scandal. I write &amp;ldquo;seemingly&amp;rdquo;, because despite these being two very different companies operating in two different markets (Zoom in video conference calls and Superhuman in emails), building very different products (Zoom is all about jump in, jump out - Superhuman is a workspace) these incidents stem from the same fundamental fault: The telephone experience.</description></item><item><title>Why conference speakers should not be paid</title><link>https://blog.nukemberg.com/post/why-conf-speakers-should-not-be-paid/</link><pubDate>Wed, 09 Nov 2016 19:48:53 +0100</pubDate><guid>https://blog.nukemberg.com/post/why-conf-speakers-should-not-be-paid/</guid><description>A few months back, the twittershphere rumbled on how wrong it is that conference speakers are not paid. In tweets and blogs, people have called out for conferences to pay speakers travel expenses and even pay them a fee for their work in preparing and delivering the talks. As an example, this article on medium.com.
Initially, I was taken by the arguments: If someone is travelling from afar to speak, their costs should be reimburse.</description></item><item><title>My burnout is not your burnout</title><link>https://blog.nukemberg.com/post/my-burnout-is-not-your-burnout/</link><pubDate>Wed, 08 Jun 2016 17:04:27 +1200</pubDate><guid>https://blog.nukemberg.com/post/my-burnout-is-not-your-burnout/</guid><description>I&amp;rsquo;m usually a private person and I don&amp;rsquo;t publicly write about personal stuff - This is my first ever personal public piece. There are several reasons why I&amp;rsquo;m writing this; Since John Willis brought up the issue of burnout to the spotlight there has been a spur of blog posts and articles about burnout and some people have been gracious enough to share their personal story. After reading people&amp;rsquo;s stories I came to realize how important it is to share those experiences, I&amp;rsquo;ll get back to that in the end.</description></item><item><title>Why a private cloud is an exercise in futility</title><link>https://blog.nukemberg.com/post/why-a-private-cloud-is-an-exercise-in-futility/</link><pubDate>Fri, 25 Mar 2016 07:51:09 +1100</pubDate><guid>https://blog.nukemberg.com/post/why-a-private-cloud-is-an-exercise-in-futility/</guid><description>&lt;p>Every corporation and enterprise want a private cloud these days. The arguments vary from company to company, usually revolving around security, cost, independence and strangely enough — reliability. I could argue that given the track record of most enterprise IT departments it seems dubious they can improve even one of these parameters compared to a public cloud, but I won’t. It turns out there’s no point refuting those arguments, because, and I cannot emphasize this enough:&lt;/p>
&lt;h2 id="you-are-going-to-end-up-using-a-public-cloud-even-if-its-more-expensive-and-less-secure-less-reliable-and-less-independent">You are going to end up using a public cloud, even if it’s more expensive and less secure, less reliable and less independent&lt;/h2></description></item><item><title>The Ironies of Reliability</title><link>https://blog.nukemberg.com/post/the-ironies-of-reliability/</link><pubDate>Sat, 12 Mar 2016 19:16:29 +0700</pubDate><guid>https://blog.nukemberg.com/post/the-ironies-of-reliability/</guid><description>Reliability promotes failures. Failures promote reliability When a system is reliable long enough, production pressure causes the operators to drive the system harder; Over time operators become less careful as the trauma of the last failure wears off. More workload is applied, new features introduced, etc, until the system trails again into the danger zone (e.g. high load once thought to be dangerous), sailing through smoothly this time, thus boosting the confidence of operators in the robustness of their system.</description></item><item><title>Bash is a thought pattern</title><link>https://blog.nukemberg.com/post/bash-is-a-thought-pattern/</link><pubDate>Fri, 26 Feb 2016 00:38:42 +0200</pubDate><guid>https://blog.nukemberg.com/post/bash-is-a-thought-pattern/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>As I became more involved in workshops and training, I observed many people coming from old-school sysadmin backgrounds struggle with the moderns tools and methodologies that the SRE and DevOps movements are promoting. I often wonder why it so hard for some of them to learn the &amp;ldquo;new ways&amp;rdquo;. I&amp;rsquo;ve heard many people comment (often disrespectfully) that these difficulties are due to lack of &amp;ldquo;technical skills&amp;rdquo; - frequently citing poor programming abilities. While I agree this may be a real problem for &lt;em>some&lt;/em> people, this explanation is far from being sufficient.&lt;/p></description></item><item><title>The most important principle of managing a software organization</title><link>https://blog.nukemberg.com/post/sw-dev-managment/</link><pubDate>Sun, 07 Feb 2016 22:46:23 +0200</pubDate><guid>https://blog.nukemberg.com/post/sw-dev-managment/</guid><description>&lt;p>During my years of consulting, I&amp;rsquo;ve run into many managers (in enterprises and startup companies alike) who just didn&amp;rsquo;t get this whole &amp;ldquo;technical debt&amp;rdquo; thing. You&amp;rsquo;ve run into those managers too, I&amp;rsquo;m sure - the kind of manager who issues pressing deadlines, marks bug reports for left-over time (which never comes), relies on VMotion or fancy SAN for high availability, refuses upgrades because of &amp;ldquo;risks&amp;rdquo; and urges you to &amp;ldquo;stop wasting your time listening to tech talks and go write features&amp;rdquo;. I&amp;rsquo;ve even heard managers tell engineers &amp;ldquo;don&amp;rsquo;t waste your time learning this framework, just write your system with it&amp;rdquo; (!!!)&lt;/p>
&lt;p>I&amp;rsquo;ve often wondered - why is it so hard for them to get something that is so painfully obvious to the majority of software engineers?&lt;/p></description></item><item><title>How many startup engineers does it take to change a lightbulb?</title><link>https://blog.nukemberg.com/post/how-many-engineers-does-it-take-to-change-a-lightbulb/</link><pubDate>Mon, 02 Nov 2015 19:40:58 +0200</pubDate><guid>https://blog.nukemberg.com/post/how-many-engineers-does-it-take-to-change-a-lightbulb/</guid><description>2 - a technical co-founder and a business co-founder. Since they don&amp;rsquo;t have enough money for proper lightbulb they use an old socket and lightbulb they found in the garage and since they don&amp;rsquo;t fit the technical co-founder builds a makeshift adapter from duct tape and aluminum foil. This actually works as long as you don&amp;rsquo;t tilt it too much. During seed negotiations the co-founders break up and the technical co-founder leaves.</description></item></channel></rss>