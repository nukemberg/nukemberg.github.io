<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on The Nukemblog</title><link>https://blog.nukemberg.com/categories/devops/</link><description>Recent content in DevOps on The Nukemblog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 16 Oct 2016 20:01:42 +0300</lastBuildDate><atom:link href="https://blog.nukemberg.com/categories/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Continuous Delusions</title><link>https://blog.nukemberg.com/presentation/continuous-delusions/</link><pubDate>Sun, 16 Oct 2016 20:01:42 +0300</pubDate><guid>https://blog.nukemberg.com/presentation/continuous-delusions/</guid><description/></item><item><title>Bash is a thought pattern</title><link>https://blog.nukemberg.com/post/bash-is-a-thought-pattern/</link><pubDate>Fri, 26 Feb 2016 00:38:42 +0200</pubDate><guid>https://blog.nukemberg.com/post/bash-is-a-thought-pattern/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>As I became more involved in workshops and training, I observed many people coming from old-school sysadmin backgrounds struggle with the moderns tools and methodologies that the SRE and DevOps movements are promoting. I often wonder why it so hard for some of them to learn the &amp;ldquo;new ways&amp;rdquo;. I&amp;rsquo;ve heard many people comment (often disrespectfully) that these difficulties are due to lack of &amp;ldquo;technical skills&amp;rdquo; - frequently citing poor programming abilities. While I agree this may be a real problem for &lt;em>some&lt;/em> people, this explanation is far from being sufficient.&lt;/p></description></item><item><title>The most important principle of managing a software organization</title><link>https://blog.nukemberg.com/post/sw-dev-managment/</link><pubDate>Sun, 07 Feb 2016 22:46:23 +0200</pubDate><guid>https://blog.nukemberg.com/post/sw-dev-managment/</guid><description>&lt;p>During my years of consulting, I&amp;rsquo;ve run into many managers (in enterprises and startup companies alike) who just didn&amp;rsquo;t get this whole &amp;ldquo;technical debt&amp;rdquo; thing. You&amp;rsquo;ve run into those managers too, I&amp;rsquo;m sure - the kind of manager who issues pressing deadlines, marks bug reports for left-over time (which never comes), relies on VMotion or fancy SAN for high availability, refuses upgrades because of &amp;ldquo;risks&amp;rdquo; and urges you to &amp;ldquo;stop wasting your time listening to tech talks and go write features&amp;rdquo;. I&amp;rsquo;ve even heard managers tell engineers &amp;ldquo;don&amp;rsquo;t waste your time learning this framework, just write your system with it&amp;rdquo; (!!!)&lt;/p>
&lt;p>I&amp;rsquo;ve often wondered - why is it so hard for them to get something that is so painfully obvious to the majority of software engineers?&lt;/p></description></item></channel></rss>